<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>coding on Don`t Panic :-)</title><link>https://lawrshen.github.io/categories/coding/</link><description>Recent content in coding on Don`t Panic :-)</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Tue, 28 Nov 2023 09:42:09 +0800</lastBuildDate><atom:link href="https://lawrshen.github.io/categories/coding/index.xml" rel="self" type="application/rss+xml"/><item><title>浅谈 C++ 的构造函数</title><link>https://lawrshen.github.io/post/c++/construct/</link><pubDate>Tue, 28 Nov 2023 09:42:09 +0800</pubDate><guid>https://lawrshen.github.io/post/c++/construct/</guid><description>&lt;p>在 C++ 里，关注一个对象的“生命周期”，意味着了解如何创建对象、拷贝(COPY)对象、移动(MOVE)对象以及如何销毁对象，首先来定义什么是 COPY 和 MOVE:&lt;/p></description></item><item><title>流量控制（TC）五十年 思维导图</title><link>https://lawrshen.github.io/post/net/tcp/tc/</link><pubDate>Sun, 17 Sep 2023 23:59:50 +0800</pubDate><guid>https://lawrshen.github.io/post/net/tcp/tc/</guid><description>&lt;blockquote>
&lt;p>文章《&lt;a href="https://arthurchiao.art/blog/traffic-control-from-queue-to-edt-zh/#11-%E6%8A%80%E6%9C%AF%E9%9C%80%E6%B1%82%E4%B8%8E%E7%BD%91%E7%BB%9C%E8%B5%B7%E6%BA%90">[译] 流量控制（TC）五十年：从基于缓冲队列（Queue）到基于时间（EDT）的演进（Google, 2018）&lt;/a>》翻译介绍了 Netdev 2018: &lt;a href="https://www.youtube.com/watch?v=MAni0_lN7zE&amp;amp;ab_channel=netdevconf">Evolving from AFAP: Teaching NICs about time&lt;/a> 和 &lt;a href="https://documents.pub/document/oct-2018-david-wetherall-presenter-nandita-dukkipati-talks2018davidwetherall.html">OCT 2018: From Queues to Earliest Departure Time&lt;/a> 两份工作的大体内容，总结成思维导图如下：&lt;/p>
&lt;/blockquote></description></item><item><title>Groupcache源码简读</title><link>https://lawrshen.github.io/post/code/groupcache/</link><pubDate>Sat, 16 Sep 2023 16:34:34 +0800</pubDate><guid>https://lawrshen.github.io/post/code/groupcache/</guid><description>GroupCache 是一款分布式缓存组件，最早被用于 dl.google.com 的文件下载。代码短小精炼，设计思想也值得学习。 组件特点 分布式缓存，通过 HTTP 协议达成节点之间通信，用功能的取</description></item><item><title>Tcp三次握手与Backlog</title><link>https://lawrshen.github.io/post/net/tcp/tcp-backlog/</link><pubDate>Sun, 27 Aug 2023 15:23:41 +0800</pubDate><guid>https://lawrshen.github.io/post/net/tcp/tcp-backlog/</guid><description>&lt;h1 id="三次握手">三次握手&lt;/h1>
&lt;p>服务端通过系统调用&lt;code>bind()&lt;/code>和&lt;code>listen()&lt;/code>绑定和监听socket-port，此时服务端处于 &lt;strong>LISTEN&lt;/strong> 状态，当客户端调用 &lt;code>connect()&lt;/code> 向服务端发起连接时，就进入到我们熟悉的三次握手当中。&lt;/p></description></item><item><title>浅谈modern c++的智能指针</title><link>https://lawrshen.github.io/post/c++/smart-ptr/</link><pubDate>Fri, 13 Jan 2023 13:41:19 +0800</pubDate><guid>https://lawrshen.github.io/post/c++/smart-ptr/</guid><description>&lt;p>手动的内存管理通常被认为很麻烦且不利于程序的可维护性，modern C++ 采用智能指针的方式对内存进行动态管理，本文试图对智能指针做一个简单的入门介绍。&lt;/p></description></item><item><title>IO 模型浅谈</title><link>https://lawrshen.github.io/post/net/io/io-models/</link><pubDate>Sat, 17 Sep 2022 11:45:34 +0800</pubDate><guid>https://lawrshen.github.io/post/net/io/io-models/</guid><description>&lt;p>网络 IO 的发展过程是随着 linux 的内核演变而变化，因此网络 IO 大致可以分为如下几个阶段：&lt;/p>
&lt;ol>
&lt;li>阻塞 IO(BIO)&lt;/li>
&lt;li>非阻塞 IO(NIO)&lt;/li>
&lt;li>IO 多路复用第一版(select/poll)&lt;/li>
&lt;li>IO 多路复用第二版(epoll)&lt;/li>
&lt;li>异步 IO(AIO)&lt;/li>
&lt;/ol>
&lt;p>那么，BIO、NIO、AIO 有什么区别呢?&lt;/p></description></item><item><title>多线程若干问</title><link>https://lawrshen.github.io/post/os/thread/pthread-faq/</link><pubDate>Sat, 17 Sep 2022 10:16:50 +0800</pubDate><guid>https://lawrshen.github.io/post/os/thread/pthread-faq/</guid><description>&lt;blockquote>
&lt;p>顺序性&lt;/p>
&lt;p>原子性&lt;/p>
&lt;p>可见性
当一个线程修改了某一个全局共享变量的数值，其他线程是否能够知道这个修改。&lt;/p>
&lt;/blockquote></description></item><item><title>从队头阻塞看 HTTP 变迁史</title><link>https://lawrshen.github.io/post/net/http/hol/</link><pubDate>Sat, 30 Jul 2022 11:14:29 +0800</pubDate><guid>https://lawrshen.github.io/post/net/http/hol/</guid><description>&lt;p>《 &lt;a href="https://zhuanlan.zhihu.com/p/330300133">关于队头阻塞（Head-of-Line blocking），看这一篇就足够了&lt;/a>》这篇文章对队头阻塞已经讲解的很清楚了，本文从常问问题角度，梳理一下队头阻塞的问题和解决方案。&lt;/p></description></item><item><title>分布式唯一 Id</title><link>https://lawrshen.github.io/post/se/id/</link><pubDate>Thu, 26 May 2022 17:55:06 +0800</pubDate><guid>https://lawrshen.github.io/post/se/id/</guid><description>UUID universally unique identifier，统一唯一标识符，是一个128位（16字节）的数字，由算法生成，算法可以是任意的，但是算法的种类不能太多，否则就不</description></item><item><title>Epoll 简介</title><link>https://lawrshen.github.io/post/net/io/epoll/</link><pubDate>Thu, 26 May 2022 14:54:40 +0800</pubDate><guid>https://lawrshen.github.io/post/net/io/epoll/</guid><description>&lt;p>epoll 可以说是和 poll 非常相似的一种 I/O 多路复用技术，epoll 通过监控注册的多个描述字，来进行 I/O 事件的分发处理。不同于 poll 的是，epoll 不仅提供了默认的 level-triggered（条件触发）机制，还提供了性能更为强劲的 edge-triggered（边缘触发）机制。&lt;/p></description></item><item><title>简谈TCP的可靠传输</title><link>https://lawrshen.github.io/post/net/tcp/tcp/</link><pubDate>Thu, 19 May 2022 10:40:25 +0800</pubDate><guid>https://lawrshen.github.io/post/net/tcp/tcp/</guid><description>&lt;p>计算机网络领域的经典问题回顾。主要针对 TCP 如何实现可靠传输。&lt;/p></description></item><item><title>Mysql 索引</title><link>https://lawrshen.github.io/post/db/mysql-index/</link><pubDate>Tue, 17 May 2022 21:12:24 +0800</pubDate><guid>https://lawrshen.github.io/post/db/mysql-index/</guid><description>&lt;p>索引是 MySQL 对查询做的一个优化，把原本杂乱无章的数据，用有序的结构组织起来，让全表扫描变成有章可循的查询。&lt;/p>
&lt;p>索引的目的是&lt;strong>提高查找效率&lt;/strong>，对数据表的值集合进行了排序，并按照一定数据结构进行了存储。&lt;/p></description></item><item><title>内存分配模型</title><link>https://lawrshen.github.io/post/os/vm/malloc/</link><pubDate>Tue, 17 May 2022 10:55:54 +0800</pubDate><guid>https://lawrshen.github.io/post/os/vm/malloc/</guid><description>&lt;p>在UNIX/C 程序中，理解如何分配和管理内存是构建健壮和可靠软件的重要基础。&lt;/p></description></item><item><title>表驱动法</title><link>https://lawrshen.github.io/post/se/table-driven/</link><pubDate>Wed, 09 Feb 2022 17:30:42 +0800</pubDate><guid>https://lawrshen.github.io/post/se/table-driven/</guid><description>&lt;p>表驱动法(Table-Driven Approach)简单说就是查表，目的是代替过多的条件分支语句。&lt;/p></description></item><item><title>Awk命令简介</title><link>https://lawrshen.github.io/post/cmd/awk/</link><pubDate>Mon, 08 Nov 2021 15:42:27 +0800</pubDate><guid>https://lawrshen.github.io/post/cmd/awk/</guid><description>&lt;p>最近在写测试脚本的需求时深感自己Linux命令知识的单薄，有很多常见且强大的命令不会使用，抓紧学习，在这记录一下&lt;code>awk&lt;/code>命令解析。&lt;/p></description></item></channel></rss>
<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Don`t Panic :-)</title><link>https://lawrshen.github.io/post/</link><description>Recent content in Posts on Don`t Panic :-)</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sat, 16 Sep 2023 16:34:34 +0800</lastBuildDate><atom:link href="https://lawrshen.github.io/post/index.xml" rel="self" type="application/rss+xml"/><item><title>Groupcache源码简读</title><link>https://lawrshen.github.io/post/code/groupcache/</link><pubDate>Sat, 16 Sep 2023 16:34:34 +0800</pubDate><guid>https://lawrshen.github.io/post/code/groupcache/</guid><description>GroupCache 是一款分布式缓存组件，最早被用于 dl.google.com 的文件下载。代码短小精炼，设计思想也值得学习。 组件特点 分布式缓存，通过 HTTP 协议达成节点之间通信，用功能的取</description></item><item><title>Tcp三次握手与Backlog</title><link>https://lawrshen.github.io/post/net/tcp/tcp-backlog/</link><pubDate>Sun, 27 Aug 2023 15:23:41 +0800</pubDate><guid>https://lawrshen.github.io/post/net/tcp/tcp-backlog/</guid><description>&lt;h1 id="三次握手">三次握手&lt;/h1>
&lt;p>服务端通过系统调用&lt;code>bind()&lt;/code>和&lt;code>listen()&lt;/code>绑定和监听socket-port，此时服务端处于 &lt;strong>LISTEN&lt;/strong> 状态，当客户端调用 &lt;code>connect()&lt;/code> 向服务端发起连接时，就进入到我们熟悉的三次握手当中。&lt;/p></description></item><item><title>浅谈modern c++的智能指针</title><link>https://lawrshen.github.io/post/c++/smart-ptr/</link><pubDate>Fri, 13 Jan 2023 13:41:19 +0800</pubDate><guid>https://lawrshen.github.io/post/c++/smart-ptr/</guid><description>&lt;p>手动的内存管理通常被认为很麻烦切不利于程序的可读性，modern C++ 采用智能指针的方式对内存进行动态管理，本文试图对智能指针做一个简单的入门介绍。&lt;/p></description></item><item><title>IO 模型浅谈</title><link>https://lawrshen.github.io/post/net/io/io-models/</link><pubDate>Sat, 17 Sep 2022 11:45:34 +0800</pubDate><guid>https://lawrshen.github.io/post/net/io/io-models/</guid><description>&lt;p>网络 IO 的发展过程是随着 linux 的内核演变而变化，因此网络 IO 大致可以分为如下几个阶段：&lt;/p>
&lt;ol>
&lt;li>阻塞 IO(BIO)&lt;/li>
&lt;li>非阻塞 IO(NIO)&lt;/li>
&lt;li>IO 多路复用第一版(select/poll)&lt;/li>
&lt;li>IO 多路复用第二版(epoll)&lt;/li>
&lt;li>异步 IO(AIO)&lt;/li>
&lt;/ol>
&lt;p>那么，BIO、NIO、AIO 有什么区别呢?&lt;/p></description></item><item><title>多线程若干问</title><link>https://lawrshen.github.io/post/os/thread/pthread-faq/</link><pubDate>Sat, 17 Sep 2022 10:16:50 +0800</pubDate><guid>https://lawrshen.github.io/post/os/thread/pthread-faq/</guid><description>&lt;blockquote>
&lt;p>顺序性&lt;/p>
&lt;p>原子性&lt;/p>
&lt;p>可见性
当一个线程修改了某一个全局共享变量的数值，其他线程是否能够知道这个修改。&lt;/p>
&lt;/blockquote></description></item><item><title>从队头阻塞看 HTTP 变迁史</title><link>https://lawrshen.github.io/post/net/http/hol/</link><pubDate>Sat, 30 Jul 2022 11:14:29 +0800</pubDate><guid>https://lawrshen.github.io/post/net/http/hol/</guid><description>&lt;p>《 &lt;a href="https://zhuanlan.zhihu.com/p/330300133">关于队头阻塞（Head-of-Line blocking），看这一篇就足够了&lt;/a>》这篇文章对队头阻塞已经讲解的很清楚了，本文从常问问题角度，梳理一下队头阻塞的问题和解决方案。&lt;/p></description></item><item><title>Golang map简介</title><link>https://lawrshen.github.io/post/golang/go-map/</link><pubDate>Sat, 28 May 2022 11:51:32 +0800</pubDate><guid>https://lawrshen.github.io/post/golang/go-map/</guid><description>&lt;p>golang 语言提供了 built-in 的 map 类型，提供 hash table 的功能。完成的特性主要有：增删查改。&lt;/p></description></item><item><title>分布式唯一 Id</title><link>https://lawrshen.github.io/post/se/id/</link><pubDate>Thu, 26 May 2022 17:55:06 +0800</pubDate><guid>https://lawrshen.github.io/post/se/id/</guid><description>UUID universally unique identifier，统一唯一标识符，是一个128位（16字节）的数字，由算法生成，算法可以是任意的，但是算法的种类不能太多，否则就不</description></item><item><title>Epoll 简介</title><link>https://lawrshen.github.io/post/net/io/epoll/</link><pubDate>Thu, 26 May 2022 14:54:40 +0800</pubDate><guid>https://lawrshen.github.io/post/net/io/epoll/</guid><description>&lt;p>epoll 可以说是和 poll 非常相似的一种 I/O 多路复用技术，epoll 通过监控注册的多个描述字，来进行 I/O 事件的分发处理。不同于 poll 的是，epoll 不仅提供了默认的 level-triggered（条件触发）机制，还提供了性能更为强劲的 edge-triggered（边缘触发）机制。&lt;/p></description></item><item><title>简谈TCP的可靠传输</title><link>https://lawrshen.github.io/post/net/tcp/tcp/</link><pubDate>Thu, 19 May 2022 10:40:25 +0800</pubDate><guid>https://lawrshen.github.io/post/net/tcp/tcp/</guid><description>&lt;p>计算机网络领域的经典问题回顾。主要针对 TCP 如何实现可靠传输。&lt;/p></description></item><item><title>Mysql 索引</title><link>https://lawrshen.github.io/post/db/mysql-index/</link><pubDate>Tue, 17 May 2022 21:12:24 +0800</pubDate><guid>https://lawrshen.github.io/post/db/mysql-index/</guid><description>&lt;p>索引是 MySQL 对查询做的一个优化，把原本杂乱无章的数据，用有序的结构组织起来，让全表扫描变成有章可循的查询。&lt;/p>
&lt;p>索引的目的是&lt;strong>提高查找效率&lt;/strong>，对数据表的值集合进行了排序，并按照一定数据结构进行了存储。&lt;/p></description></item><item><title>内存分配模型</title><link>https://lawrshen.github.io/post/os/vm/malloc/</link><pubDate>Tue, 17 May 2022 10:55:54 +0800</pubDate><guid>https://lawrshen.github.io/post/os/vm/malloc/</guid><description>&lt;p>在UNIX/C 程序中，理解如何分配和管理内存是构建健壮和可靠软件的重要基础。&lt;/p></description></item><item><title>表驱动法</title><link>https://lawrshen.github.io/post/se/table-driven/</link><pubDate>Wed, 09 Feb 2022 17:30:42 +0800</pubDate><guid>https://lawrshen.github.io/post/se/table-driven/</guid><description>&lt;p>表驱动法(Table-Driven Approach)简单说就是查表，目的是代替过多的条件分支语句。&lt;/p></description></item><item><title>Awk命令简介</title><link>https://lawrshen.github.io/post/cmd/awk/</link><pubDate>Mon, 08 Nov 2021 15:42:27 +0800</pubDate><guid>https://lawrshen.github.io/post/cmd/awk/</guid><description>&lt;p>最近在写测试脚本的需求时深感自己Linux命令知识的单薄，有很多常见且强大的命令不会使用，抓紧学习，在这记录一下&lt;code>awk&lt;/code>命令解析。&lt;/p></description></item><item><title>Go Mod版本管理概要</title><link>https://lawrshen.github.io/post/golang/go-mod/</link><pubDate>Sun, 12 Sep 2021 16:02:02 +0800</pubDate><guid>https://lawrshen.github.io/post/golang/go-mod/</guid><description>&lt;p>一图概述Go MOD版本管理：&lt;/p></description></item><item><title>Docker里使用MySQL</title><link>https://lawrshen.github.io/post/tools/docker-mysql/</link><pubDate>Sat, 28 Aug 2021 20:14:00 +0800</pubDate><guid>https://lawrshen.github.io/post/tools/docker-mysql/</guid><description>&lt;p>本科前两年因为装软件搞的老电脑乌烟瘴气（主要是装了各种依赖以及混乱的文件管理），避开了装病毒软件的坑之外，太多软件只是一学期上课使用而已&lt;/p></description></item><item><title>自定义配置一个简洁高效的Zsh</title><link>https://lawrshen.github.io/post/cmd/basic-zsh/</link><pubDate>Fri, 27 Aug 2021 23:49:47 +0800</pubDate><guid>https://lawrshen.github.io/post/cmd/basic-zsh/</guid><description>&lt;blockquote>
&lt;p>事实上 oh-my-zsh 并不好用，严重拖慢了 Zsh 的速度，反而让你的工作并不高效。&lt;/p>
&lt;/blockquote>
&lt;p>Shell 是类 Unix 系统中超级好用的工具，而 Zsh 是 shell 中的佼佼者，但是现在网上一搜索 Zsh 的配置方案，遍地都是的互相复制粘贴的 oh-my-zsh 配置方案。&lt;/p></description></item><item><title>在Windows上更舒服简单的使用终端</title><link>https://lawrshen.github.io/post/cmd/bash-on-windows/</link><pubDate>Sun, 22 Aug 2021 20:57:27 +0800</pubDate><guid>https://lawrshen.github.io/post/cmd/bash-on-windows/</guid><description>&lt;h1 id="bash-on-windows">Bash on Windows&lt;/h1>
&lt;p>Windows作为桌面操作系统界的霸主在编程方面有一些一言难尽的硬伤，对Windows用户而言开发环境的选择一般有：纯 Windows、Windows+虚拟机 和 Windows+双系统。&lt;/p></description></item><item><title>社交媒介困境笔记</title><link>https://lawrshen.github.io/post/other/social-media/</link><pubDate>Fri, 20 Aug 2021 10:26:27 +0800</pubDate><guid>https://lawrshen.github.io/post/other/social-media/</guid><description>&lt;blockquote>
&lt;p>试图探讨和社交媒体困境相关的三个主题：社交压力来源，现有解法利弊，其他解法可能&lt;/p>
&lt;/blockquote></description></item><item><title>快速上手RSS，给自己订阅消息</title><link>https://lawrshen.github.io/post/tools/ohmyrss/</link><pubDate>Mon, 16 Aug 2021 22:04:17 +0800</pubDate><guid>https://lawrshen.github.io/post/tools/ohmyrss/</guid><description>&lt;p>网上其实还是能搜到不少介绍RSS的介绍的，但是新手可能更关心如何上手的问题。anyway先能用起来才有进一步学习的动力，本文记录了我从接触RSS到使用的历程。&lt;/p></description></item><item><title>公开课笔记</title><link>https://lawrshen.github.io/post/other/opencourse-list/</link><pubDate>Sun, 15 Aug 2021 14:11:28 +0800</pubDate><guid>https://lawrshen.github.io/post/other/opencourse-list/</guid><description>&lt;blockquote>
&lt;p>一些有所收获的公开课记录，涵盖了技术，人文各方面有见解的讲授。&lt;/p>
&lt;/blockquote></description></item><item><title>Leetcode刷题笔记</title><link>https://lawrshen.github.io/post/se/leetcode/</link><pubDate>Sun, 15 Aug 2021 10:37:11 +0800</pubDate><guid>https://lawrshen.github.io/post/se/leetcode/</guid><description>576 出界的路径数 m*n表格(1x1~50x50)中一个位置在给定maxMove(0~50)的情况下到达边框外的路径数量和 有三个参数，起始点的横</description></item><item><title>WSL2的网，连上了但还没完全连上</title><link>https://lawrshen.github.io/post/wsl/wsl-net/</link><pubDate>Wed, 11 Aug 2021 22:45:17 +0800</pubDate><guid>https://lawrshen.github.io/post/wsl/wsl-net/</guid><description>&lt;blockquote>
&lt;p>无特别说明，本文以下内容所提到的 WSL 皆指 WSL2。&lt;/p>
&lt;/blockquote>
&lt;p>起因是为了在Windows10运行docker，这个暑假就开始使用WSL进行开发，无论是 Python/C++/Golang 都是用 VSCode Remote WSL 进行开发的，体验非常好。&lt;/p></description></item><item><title>好物推荐，Chrome插件测评</title><link>https://lawrshen.github.io/post/tools/chrome-plugins/</link><pubDate>Wed, 11 Aug 2021 19:41:47 +0800</pubDate><guid>https://lawrshen.github.io/post/tools/chrome-plugins/</guid><description>&lt;p>Chrome浏览器常为人乐道的一点是拥有丰富的插件，除了通常推荐的如&lt;code>Adblock&lt;/code>外，这里给出一些由日常衍生而来的一些痛点解决问题所发现的好用插件。&lt;/p></description></item><item><title>如何使用 heredoc 作为一个文本编辑器[译]</title><link>https://lawrshen.github.io/post/cmd/heredoc/</link><pubDate>Wed, 11 Aug 2021 19:38:26 +0800</pubDate><guid>https://lawrshen.github.io/post/cmd/heredoc/</guid><description>项目里看到了一种shell脚本新奇的写法，找到一篇通俗易懂的介绍，引用于此。 原文链接：How to use heredoc as a text editor 这个不起眼的终端功能在紧要关头提供</description></item><item><title>你们仍未掌握那天所学的 git 知识</title><link>https://lawrshen.github.io/post/cmd/git-tricks/</link><pubDate>Sun, 08 Aug 2021 23:28:42 +0800</pubDate><guid>https://lawrshen.github.io/post/cmd/git-tricks/</guid><description>&lt;h1 id="config">config&lt;/h1>
&lt;h2 id="git设置代理">git设置代理&lt;/h2>
&lt;p>众所周知的原因，为了提高git clone大型开源社区平台github的访问速度，通过查询工具的端口号（port），在git终端设置github.com代理：&lt;/p></description></item><item><title>使用WSL2安装使用Gitbook</title><link>https://lawrshen.github.io/post/wsl/wsl-gitbook/</link><pubDate>Sat, 07 Aug 2021 22:29:39 +0800</pubDate><guid>https://lawrshen.github.io/post/wsl/wsl-gitbook/</guid><description>&lt;h1 id="环境准备">环境准备&lt;/h1>
&lt;p>我的gitbook是在wsl2上安装Ubuntu18后install的，开始时换完源一穷二白，直接命令行：&lt;/p></description></item><item><title>你好 世界</title><link>https://lawrshen.github.io/post/hello-world/</link><pubDate>Sat, 07 Aug 2021 18:37:09 +0800</pubDate><guid>https://lawrshen.github.io/post/hello-world/</guid><description>Hello world 编程里，打出hello world就算是开始了新的一门语言学习。 从hexo到hugo框架，原博客迁移至此，试着继续写点小东西。</description></item><item><title>堆的应用：动态找寻中位数</title><link>https://lawrshen.github.io/post/algo/heap-mid/</link><pubDate>Wed, 03 Feb 2021 17:43:37 +0800</pubDate><guid>https://lawrshen.github.io/post/algo/heap-mid/</guid><description>&lt;blockquote>
&lt;p>《算法设计与分析（第2版）》黄宇著 14章 堆与偏序关系&lt;/p>
&lt;p>14.6 有一组元素，它们不断地被&lt;strong>动态加入和删除&lt;/strong>，但是我们需要随时找出当前&lt;strong>所有元素的中位数&lt;/strong>。为此，请设计一个数据结构，以支持&lt;strong>对数时间&lt;/strong>的插入、删除和&lt;strong>常数时间&lt;/strong>的找出中位数(提示:利用两个堆来实现该数据结构)。&lt;/p>
&lt;/blockquote></description></item></channel></rss>